<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>盒子模型和box-sizing</title>
      <link href="/2018/04/25/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8Cbox-sizing/"/>
      <url>/2018/04/25/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8Cbox-sizing/</url>
      <content type="html"><![CDATA[<p>关于盒子模型，几乎是每个学习前端的同学都必须要了解和掌握的知识，同时也是面试过程中经常会被问到的，今天我们就来详细的学习一下盒子模型，同时学习一下改变计算元素宽度和高度的CSS3属性：box-sizing。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>在一个文档中，每个<strong>元素</strong>都被表示为一个<strong>矩形的盒子</strong>。确定这些盒子的尺寸，属性（颜色，背景，边框）和位置是渲染引擎的目标。</p><p>在CSS中，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。</p><p>每个盒子有四个边：</p><ol><li>外边距 margin</li><li>边框 border</li><li>内边距 padding</li><li>内容 content</li></ol><p>如下图所示（图片来自MDN）：<br><img src="/2018/04/25/盒子模型和box-sizing/boxmodel.png" title="box-model"></p><p><strong>内容区域 content area</strong> 是包含元素真实内容的区域。它通常包含背景、颜色或者图片等，位于内容边界的内部，它的大小为内容宽度及内容高度。如果box-sizing为默认值，width，min-width，max-width，height，min-height，max-height 控制内容的大小。</p><p><strong>内边距区域 padding area</strong> 延伸到包围padding的边框。如果内容区域设置了背景、颜色或者图片，这些样式将会延伸到padding上，而不是仅仅作用于内容区域。内边距与内容边界之间的空间由 padding 控制。</p><p><strong>边框区域 border area</strong> 是包含边框的区域，扩展了内边距区域。它位于边框边界内部，由 border 控制。</p><p><strong>外边距区域 margin area</strong> 用空白区域扩展边框区域，以分开相邻的元素。它的大小由 margin 控制。</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">外边距合并</a> 的情况下，由于盒之间共享外边距，外边距不容易弄清楚。</p><p>最后，对于非替换的行内元素来说，尽管内容周围存在内边距与边框，但其占用空间（行高）由 <strong>line-height</strong> 属性决定。如下图所示：<br><img src="/2018/04/25/盒子模型和box-sizing/inline-line-height-1.png"><br><img src="/2018/04/25/盒子模型和box-sizing/inline-line-height-2.png"></p><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p><strong>box-sizing</strong> 属性可以用来更改用于计算元素宽度和高度的默认的<strong>CSS盒子模型</strong>，即：由标准盒子模型，改为IE的怪异盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 关键字 值 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局 值 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></p><p>在CSS中，你设置一个元素的宽度与高度只会应用到这个元素的内容区。如果这个元素又任何的 border 或 padding，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距的值。这意味着当你调整一个元素的宽高时，要时刻注意到这个元素的边框和内边距。特别是当我们事先响应式布局时，这个特点非常的烦人，不便于计算。</p><p>box-sizing属性可以被用来调整这些表现：</p><ul><li><p><strong>content-box</strong> 默认值，标准盒子模型。width和height只包括内容的宽和高，不包括边框border，内边距padding，外边距margin。计算公式：<br>width = 内容的宽度，<br>height = 内容的高度。<br>如下图所示：</p><img src="/2018/04/25/盒子模型和box-sizing/content-box.png"></li><li><p><strong>border-box</strong> width和height属性包括内容，内边距和边框，但不包括外边距。内容框不能为负，并且被分配到0。计算公式：<br>width = border + padding + 内容的width，<br>height = border + padding + 内容的height。<br>如下图所示：</p><img src="/2018/04/25/盒子模型和box-sizing/border-box.png"></li></ul><p>在其他文章中有了解到，from表单中的一些元素，在默认状态下，表现的不一致，我们这里不去深究，在之后的文章中再单独研究。</p><p>以上就是关于盒子模型和box-sizing属性的介绍，如果有错误的地方，欢迎指正。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>深入理解JavaScript事件流</title>
      <link href="/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>“JavaScript与HTML之间的交互是通过<strong>事件</strong>实现的。事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用<strong>侦听器</strong>（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为观察员模式的模型，支持页面的行为（JavaScript代码）与页面的外观（HTML和CSS代码）之间的松散耦合。”</p><p><strong>事件流</strong>描述的是从页面中接收事件的顺序。  </p><p>本文主要讲解以下几个内容：</p><ol><li>事件冒泡  </li><li>事件捕获  </li><li>DOM事件流  </li><li>事件执行的顺序</li></ol><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>IE的事件流叫做<strong>事件冒泡</strong>（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的HTML页面为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你单击了页面中的&lt;div&gt;元素，那么这个click事件会按照如下顺序传播：  </p><ol><li>&lt;div&gt;</li><li>&lt;body&gt;</li><li>&lt;html&gt;</li><li>document</li></ol><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>Netscape Communicator团队提出的另一种事件流叫做<strong>事件捕获</strong>（event capturing）。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于：在事件到达预定目标之前捕获它。仍已前面的HTML页面为例，单击&lt;div&gt;元素会以下列顺序触发click事件：</p><ol><li>document</li><li>&lt;html&gt;</li><li>&lt;body&gt;</li><li>&lt;div&gt;</li></ol><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ol><p>首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p><p>这里主要学习下<strong>DOM2级事件处理程序</strong><br>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<br>addEventListener()和removeEventListener()<br>所有的DOM节点都包含了这两个方法。</p><p>addEventListener()语法如下：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, options);</span><br><span class="line">target.addEventListener(type, listener, &#123;<span class="attr">capture</span>: <span class="built_in">Boolean</span>, <span class="attr">bubbling</span>: <span class="built_in">Boolean</span>, <span class="attr">once</span>: <span class="built_in">Boolean</span>&#125;);</span><br><span class="line">target.addEventListener(type, listener, useCapture);</span><br><span class="line">target.addEventListener(type, listener[, useCapture, wantsUntrusted]);  <span class="comment">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>type</strong>：表示监听<strong>事件类型</strong>的字符串 </li><li><strong>listener</strong>：作为事件处理程序的函数</li><li><strong>options</strong>: 可选，一个指定有关 listener 属性的可选的参数对象，可用的选项包括：<br>capture:Boolean, once:Boolean, passive:Boolean, mozSystemGroup:Boolean   </li><li><strong>useCapture</strong>: 可选，Boolean, 指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件 </li><li><strong>wantsUntrusted</strong>: 如果为 true , 则事件处理程序会接收网页自定义的事件。此参数只适用于 Gecko，主要用于附加组件的代码和浏览器本身</li></ul><p><strong>注意</strong>：在旧版本的DOM的规定中， addEventListener()的第三个参数是一个布尔值表示是否在捕获阶段调用事件处理程序。详情请<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">点击查看MDN</a>  </p><p>removeEventListener()语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.removeEventListener(type, listener[, useCapture]);</span><br></pre></td></tr></table></figure></p><p>参数说明：  </p><ul><li><strong>type</strong>：一个字符串，表示需要移除的事件类型，如“click”</li><li><strong>listener</strong>：需要移除的 EventListener 函数（先前使用addEventListener方法定义的）</li><li><strong>useCapture</strong>：可选，指定需要移除的 EventListener 函数是否为事件捕获。默认值为 false<br>如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，那么这两次事件需要分别移除  </li></ul><h3 id="事件执行的顺序"><a href="#事件执行的顺序" class="headerlink" title="事件执行的顺序"></a>事件执行的顺序</h3><p>我们先看一个题目：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'outer'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'inner'</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="built_in">document</span>.getElementById(<span class="string">'outer'</span>);</span><br><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ccc'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>当我们点击按钮时，打印的结果是什么？大家可以尝试一下。<br>答案是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ddd</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>我们来分析下：  </p><ol><li>首先是事件捕获阶段，<strong>div#outer</strong>元素首先接收到click事件，所以第一个打印的是“ddd”；</li><li>然后是处于目标阶段，在处于目标阶段时，事件触发的顺序跟addEventListener方法的第三个参数无关，而是谁先绑定，谁先执行，所以第二个打印的是“bbb”，然后是“ccc”，大家可以调换一下绑定顺序看看；</li><li>最后是事件冒泡阶段，<strong>div#outer</strong>接收到click事件，打印出“aaa”。</li></ol><p>大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，不建议在事件捕获阶段注册事件处理程序。  </p><p>另外，在绑定事件的时候，如果绑定的是匿名函数，比如下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：如果是使用IE的attachEvent()方法来绑定事件，这时的执行顺序正好相反。</p><p>如果是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>如果是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa </span><br><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>当我们需要取消事件的进一步捕获或冒泡时，就要用到stopPropagation()方法，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="built_in">document</span>.getElementById(<span class="string">'outer'</span>);</span><br><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  ev.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ccc'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>当我们点击按钮时，打印的结果是什么？。<br>答案是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ddd</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure></p><p>这里需要注意一下，调用stopPropagation方法时，是处于目标阶段，不影响此阶段的事件执行，所以会打印出“ccc”。</p><h3 id="事件流的应用：事件代理"><a href="#事件流的应用：事件代理" class="headerlink" title="事件流的应用：事件代理"></a>事件流的应用：事件代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'wrap'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果点击页面中的li元素，要求输出li当中的内容，我们通常会这样来写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>);</span><br><span class="line">  <span class="keyword">const</span> list = wrap.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    list[i].addEventListener(<span class="string">'click'</span>, showContent, <span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    alert(ev.target.innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>利用事件流的特性，我们可以只在父元素ul上绑定一个事件就可以完成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>);</span><br><span class="line">  </span><br><span class="line">  wrap.addEventListener(<span class="string">'click'</span>, showContent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.target.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</span><br><span class="line">      alert(ev.target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段；<br>2、addEventListener方法的使用；<br>3、处于目标阶段时，事件执行的顺序与绑定的顺序相同；<br>4、取消事件的进一步捕获或冒泡使用 stopPropagation() 方法。</p><p>以上就是关于JavaScript事件流的介绍，如果有错误的地方，欢迎指正。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
