<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>深入理解JavaScript事件流</title>
      <link href="/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>“JavaScript与HTML之间的交互是通过<strong>事件</strong>实现的。事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用<strong>侦听器</strong>（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为观察员模式的模型，支持页面的行为（JavaScript代码）与页面的外观（HTML和CSS代码）之间的松散耦合。”</p><p><strong>事件流</strong>描述的是从页面中接收事件的顺序。  </p><p>本文主要讲解以下三个内容：</p><ol><li>事件冒泡  </li><li>事件捕获  </li><li>DOM事件流  </li></ol><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>IE的事件流叫做<strong>事件冒泡</strong>（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的HTML页面为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你单击了页面中的&lt;div&gt;元素，那么这个click事件会按照如下顺序传播：  </p><ol><li>&lt;div&gt;</li><li>&lt;body&gt;</li><li>&lt;html&gt;</li><li>document</li></ol><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>Netscape Communicator团队提出的另一种事件流叫做<strong>事件捕获</strong>（event capturing）。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于：在事件到达预定目标之前捕获它。仍已前面的HTML页面为例，单击&lt;div&gt;元素会以下列顺序触发click事件：</p><ol><li>document</li><li>&lt;html&gt;</li><li>&lt;body&gt;</li><li>&lt;div&gt;</li></ol><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ol><p>首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p><p>这里主要学习下<strong>DOM2级事件处理程序</strong><br>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<br>addEventListener()和removeEventListener()<br>所有的DOM节点都包含了这两个方法。<br>addEventListener()语法如下：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, options);</span><br><span class="line">target.addEventListener(type, listener, &#123;<span class="attr">capture</span>: <span class="built_in">Boolean</span>, <span class="attr">bubbling</span>: <span class="built_in">Boolean</span>, <span class="attr">once</span>: <span class="built_in">Boolean</span>&#125;);</span><br><span class="line">target.addEventListener(type, listener, useCapture);</span><br><span class="line">target.addEventListener(type, listener[, useCapture, wantsUntrusted]);  <span class="comment">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>type</strong>：表示监听<strong>事件类型</strong>的字符串 </li><li><strong>listener</strong>：作为事件处理程序的函数</li><li><strong>options</strong>: 可选，一个指定有关 listener 属性的可选的参数对象，可用的选项包括：<br>capture:Boolean, once:Boolean, passive:Boolean, mozSystemGroup:Boolean   </li><li><strong>useCapture</strong>: 可选，Boolean, 指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件 </li><li><strong>wantsUntrusted</strong>: 如果为 true , 则事件处理程序会接收网页自定义的事件。此参数只适用于 Gecko，主要用于附加组件的代码和浏览器本身</li></ul><p><strong>注意</strong>：在旧版本的DOM的规定中， addEventListener()的第三个参数是一个布尔值表示是否在捕获阶段调用事件处理程序。详情请<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">点击查看MDN</a></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
