<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>web缓存</title>
      <link href="/2018/05/30/web%E7%BC%93%E5%AD%98/"/>
      <url>/2018/05/30/web%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<p>缓存分为服务端缓存和客户端缓存，常用的服务端缓存有CDN缓存，客户端缓存，前端一般是指浏览器缓存。</p><a id="more"></a><h3 id="为什么要用缓存"><a href="#为什么要用缓存" class="headerlink" title="为什么要用缓存"></a>为什么要用缓存</h3><p>一般针对常用的静态资源（CSS, JS, 图片）等使用缓存，原因如下：</p><ul><li>请求更快：通过将内容缓存再本地浏览器或距离最近的缓存服务器（如CDN），在不影响网站交互的前提下可以大大加快网站的加载速度。</li><li>节省带宽：对于已经缓存的文件，可以减少请求带宽甚至无需请求网络。</li><li>减轻服务器压力：在大量用户并发请求下，服务器的性能受到限制，此时将静态资源放置在网络的多个节点，可以起到均衡负载的作用，降低服务器的压力。</li></ul><h3 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h3><p>浏览器缓存分为<strong>强缓存</strong>和<strong>协商缓存</strong>：</p><ul><li>强缓存：浏览器在加载资源时，先根据资源的Expires或Cache-Control来判断是否命中强缓存，如果命中，浏览器直接从自己的缓存中读取资源，不会发送请求到服务器。</li><li>协商缓存：没有命中强缓存时，浏览器会发送一个请求到服务器，服务器在接受到请求时，依据资源的Last-Modified/If-Modified-Since或Etag/If-None-Match来验证这个资源是否命中协商缓存，如果命中，服务器将返回304 Not Modified，但是不会返回这个资源的数据，而是告诉浏览器可以直接从缓存中加载这个资源；若未命中，服务器将资源返回给浏览器，并更新本地的缓存数据。</li></ul><h3 id="如何设置缓存"><a href="#如何设置缓存" class="headerlink" title="如何设置缓存"></a>如何设置缓存</h3><h4 id="HTML-Meta标签控制缓存，例如："><a href="#HTML-Meta标签控制缓存，例如：" class="headerlink" title="HTML Meta标签控制缓存，例如："></a>HTML Meta标签控制缓存，例如：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span>  <span class="comment">&lt;!-- HTTP1.1 优先级高于Expires --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"pragma"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span>  <span class="comment">&lt;!-- HTTP1.0 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"0"</span>&gt;</span>  <span class="comment">&lt;!-- HTTP1.0 &amp; 1.1 示意到期时间 --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：使用meta标签设置的参数优先级低于http请求中声明。</p><h4 id="HTTP-Header控制缓存"><a href="#HTTP-Header控制缓存" class="headerlink" title="HTTP Header控制缓存"></a>HTTP Header控制缓存</h4><ul><li><p>Expires是http1.0提出的一个表示资源过期时间的header，它描述的是一个绝对时间，由服务器返回，用GMT格式的字符串表示，如：Expires: Thu, 21 Dec 2018 16:23:40 GMT。<br>Expires是较老的强缓存管理header，如果客户端的时间与服务器的时间相差很大，那么误差就很大。因此，在http1.1开始，使用Cache-Control: max-age=秒 代替。</p></li><li><p>Cache-Control描述的是一个相对时间，取值可以是public, private, no-cache, no-store, max-age。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public: 响应可以被任何缓存区缓存</span><br><span class="line">private: 对于单个用户的整个或部分响应消息，不能被共享缓存处理</span><br><span class="line">no-cache: 请求或响应不能缓存，准确的说是需要与服务器确认</span><br><span class="line">no-store: 请求和响应都不使用缓存</span><br><span class="line">max-age: 从请求的时间开始，允许缓存有效的最长时间，单位秒</span><br></pre></td></tr></table></figure><p>如下图所示：</p><img src="/2018/05/30/web缓存/cache.png">  <p><strong>注意</strong>：当Expires和Cache-Control同时存在时，Cache-Control优先级高于Expires。</p></li><li><p>Last-Modified/If-Modified-Since<br>要配合Cache-Control使用。<br><strong>Last-Modified</strong>: 表示这个响应资源的最后修改时间。web服务器在响应请求时，告诉浏览器资源的最后修改时间。<br><strong>If-Modified-Since</strong>: 当资源过期时，发现资源具有Last-Modified声明，则带上头信息If-Modified-Since表示请求时间，再次向服务器发送请求。web服务器收到请求后，发现有头信息If-Modified-Since，则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源被改动过，则返回资源内容，http 200；若最后修改时间较旧，说明资源未被修改，则响应http 304，告知浏览器继续使用所保存的cache。<br><strong>缺点</strong>：  </p><ol><li>Last-Modified标注的时间只能精确到秒。</li><li>如果某些文件会被定期生成，当有时内容未改变，但Last-Modified却改变了，导致文件没法使用缓存。</li></ol></li><li><p>Etag/If-None-Match<br>要配合Cache-Control使用。<br><strong>Etag</strong>：web服务器响应请求时，告诉浏览器当前资源在服务器中的唯一标识（生成规则由服务器决定）。<br><strong>If-None-Match</strong>：当资源过期时，发现资源有Etag声明，则带上头信息If-None-Match（Etag的值）再次向web服务器发送请求。web服务器收到请求后，发现有头信息If-None-Match，则与被请求资源的相应校验串进行比对来决定返回200还是304。<br>Etag是服务器自动生成或者由开发组生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与Etag一起使用时，服务器会优先验证Etag。</p></li><li><p>图片说明浏览器再次请求时：</p><img src="/2018/05/30/web缓存/cache-flow.png"></li></ul><p>（完）</p>]]></content>
      
      <categories>
          
          <category> HTTP相关 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>前端常见跨域解决方案</title>
      <link href="/2018/04/26/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/04/26/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>跨域是指在一个域下的文档或脚本试图去请求另一个域下的资源。<br>其实前端通常所说的跨域，是指由于浏览器同源策略限制的一类场景。</p><a id="more"></a><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><strong>同源策略SOP</strong>(Same origin policy)是一种约定，是由Netscape提出的一个著名的安全策略。它是浏览器最核心也是最基本的安全功能。可以说Web是构建在<strong>同源策略</strong>基础之上的，浏览器之上针对同源策略的一种实现。</p><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离恶意文件的重要安全机制。</p><p>同源策略限制以下几种行为：</p><ol><li>Cookie、LocalStorage 和 IndexDB 无法获取</li><li>DOM 和 JS 对象无法获得</li><li>AJAX 请求不能发送</li></ol><p>那么什么是同一个源，一个源的定义是什么？</p><h3 id="一个源的定义"><a href="#一个源的定义" class="headerlink" title="一个源的定义"></a>一个源的定义</h3><p>如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。<br>下表给出相对 <a href="http://test.example.com/a.html" target="_blank" rel="noopener">http://test.example.com/a.html</a> 同源检测的示例：</p><table><tr><th>URL</th><th>结果</th><th>原因</th></tr><tr><td><a href="http://test.example.com/b.html" target="_blank" rel="noopener">http://test.example.com/b.html</a></td><td>成功</td><td></td></tr><tr><td><a href="http://test.example.com/b/c.html" target="_blank" rel="noopener">http://test.example.com/b/c.html</a></td><td>成功</td><td></td></tr><tr><td><a href="https://test.example.com/b.html" target="_blank" rel="noopener">https://test.example.com/b.html</a></td><td>失败</td><td>不同协议（https和http）</td></tr><tr><td><a href="http://test.example.com:81/b.html" target="_blank" rel="noopener">http://test.example.com:81/b.html</a></td><td>失败</td><td>不同端口</td></tr><tr><td><a href="http://new.example.com/b.html" target="_blank" rel="noopener">http://new.example.com/b.html</a></td><td>失败</td><td>不同域名</td></tr></table>  <p><strong>注意</strong>：当涉及到同源策略时，Internet Explorer有两个主要的不同点  </p><ul><li>授信范围：两个相互之间高度互信的域名，如公司域名，不遵守同源策略的限制。</li><li>端口：IE未将端口号加入到同源策略的组成部分之中。</li></ul><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><ol><li><a href="#method-1">图像Ping</a></li><li><a href="#method-2">JSONP</a></li><li><a href="#method-3">document.domain + iframe跨域</a></li><li><a href="#method-4">window.name + iframe跨域</a></li><li><a href="#method-5">跨文档消息传递（postMessage）</a></li><li><a href="#method-6">跨域资源共享（CORS）</a></li><li><a href="#method-7">Web Sockets协议跨域</a></li></ol><h4 id="一、图像Ping"><a href="#一、图像Ping" class="headerlink" title="一、图像Ping"></a><span id="method-1">一、图像Ping</span></h4><p>我们知道，一个网页可以从任何网页中加载图像，而不用担心跨域的问题。所以我们可以动态地创建图像，使用它们的 onload 和 onerror 事件处理程序来确定是否接收到了响应。<br><strong>图像Ping</strong>是与服务器进行简单、单向的跨域通信的一种方式。请求的数据是通过<strong>查询字符串</strong>形式发送的，而响应跨域是任意内容。通过图像Ping，浏览器得不到任何具体的数据，但是通过侦听 load 和 error 事件，它能知道响应是什么时候接收到的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Done!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">'http://www.example.com/test?name=yuyi'</span>;</span><br></pre></td></tr></table></figure></p><p>因此<strong>图像Ping</strong>常用于跟踪用户点击页面或动态广告曝光次数。<br><strong>图像Ping</strong>有两个主要的缺点，一是只能发送GET请求，二是无法访问服务器的响应文本。因此图像Ping只能用于浏览器与服务器间的单向通信。</p><h4 id="二、JSONP"><a href="#二、JSONP" class="headerlink" title="二、JSONP"></a><span id="method-2">二、JSONP</span></h4><p>JSONP是 JSON with padding（填充式JSON或参数式JSON）的简写，是应用JSON的一种新方法，JSONP看起来和JSON差不多，只不过是被包含在函数调用中的JSON，就像下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback(&#123; <span class="string">"name"</span>: <span class="string">"yuyi"</span> &#125;);</span><br></pre></td></tr></table></figure></p><p><strong>JSONP</strong>由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的JSON数据。来看一个例子：</p><p>原生JavaScript实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res); <span class="comment">// &#123; name: "yuyi" &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://127.0.0.1:8888/index?callback=handleResponse'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure></p><p>后端node.js代码示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = qs.parse(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">const</span> fn = params.callback;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span> &#125;);</span><br><span class="line">  res.write(fn + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">'yuyi'</span>&#125;) + <span class="string">')'</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at port 8888.'</span>);</span><br></pre></td></tr></table></figure></p><p>JSONP就是这么简单易用，但是JSONP也有一些缺点：</p><ol><li>JSONP是在其他域中加载代码执行，需要注意安全问题。</li><li>无法确定JSONP请求是否失败。</li><li>JSONP只能支持GET请求。</li></ol><h4 id="三、document-domain-iframe跨域"><a href="#三、document-domain-iframe跨域" class="headerlink" title="三、document.domain + iframe跨域"></a><span id="method-3">三、document.domain + iframe跨域</span></h4><p>此方案仅限主域相同，子域不同的跨域应用场景。<br>实现原理：两个页面都通过js强制设置 document.domain 为基础主域，就实现了同域。  </p><p>父窗口：<a href="http://www.domain.com/a.html" target="_blank" rel="noopener">http://www.domain.com/a.html</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">'iframe'</span> <span class="attr">src</span>=<span class="string">'http://child.domain.com/b.html'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">"yuyi"</span> &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>子窗口：<a href="http://child.domain.com/b.html" target="_blank" rel="noopener">http://child.domain.com/b.html</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'domain.com'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.parent.data);  <span class="comment">// &#123; name: "yuyi" &#125;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="四、window-name-iframe跨域"><a href="#四、window-name-iframe跨域" class="headerlink" title="四、window.name + iframe跨域"></a><span id="method-4">四、window.name + iframe跨域</span></h4><p>window.name属性的独特之处：name值在不同页面（甚至不同域名）加载之后依旧存在，并且跨域支持非常长的 name 值（2MB）。</p><p>a.html（<a href="http://www.domain1.com/a.html）" target="_blank" rel="noopener">http://www.domain1.com/a.html）</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="function"><span class="keyword">function</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载跨域页面</span></span><br><span class="line">  iframe.src = url;</span><br><span class="line"></span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;  <span class="comment">// load跨域页成功（跨域页设置window.name），切换到同域代理页面</span></span><br><span class="line">      iframe.contentWindow.location = <span class="string">'http://www.domain1.com/proxy.html'</span>;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">1</span>) &#123; <span class="comment">// load同域proxy页后，读取同域window.name中数据</span></span><br><span class="line">      callback(iframe.contentWindow.name);</span><br><span class="line">      destoryFrame();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据后，销毁iframe，释放内存，同时也保证安全（不被其他域frame js访问）</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">destoryFrame</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    iframe.contentWindow.document.write(<span class="string">''</span>);</span><br><span class="line">    iframe.contentWindow.close();</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(iframe);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line">proxy(<span class="string">'http://www.domain2.com/b.html'</span>, (data) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(data));  <span class="comment">// &#123; name: "yuyi" &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>proxy.html（<a href="http://www.domain1.com/proxy.html）" target="_blank" rel="noopener">http://www.domain1.com/proxy.html）</a><br>中间代理页，与a.html同域，内容为空即可。</p><p>b.html（<a href="http://www.domain2.com/b.html）" target="_blank" rel="noopener">http://www.domain2.com/b.html）</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.name = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">"yuyi"</span>&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="五、跨文档消息传递"><a href="#五、跨文档消息传递" class="headerlink" title="五、跨文档消息传递"></a><span id="method-5">五、跨文档消息传递</span></h4><p><strong>跨文档消息传送（cross-document messaging）</strong>，有时候简称为<strong>XDM</strong>，指的是在来自不同域的页面间传递消息。XDM的核心是<strong>postMessage()</strong>方法。在HTML5规范中，除了XDM部分之外的其他部分也会提到这个方法名，但都是为了同一个目的：向另一个地方传递数据。对于XDM而言，“另一个地方”指的是<strong>包含在当前页面</strong>的&lt;iframe&gt;元素，或者由当前页面弹出的窗口。<br>postMessage()方法接收两个参数：一条消息和一个表示消息接收方来自哪个域的字符串。第二个参数对保障安全通信非常重要，可以防止浏览器把消息发送到不安全的地方。</p><p>a.html (<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">'iframe'</span> <span class="attr">src</span>=<span class="string">'http://www.domain2.com/b.html'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">  iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">'yuyi'</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 向domain2传送跨域数据</span></span></span><br><span class="line"><span class="javascript">    iframe.contentWindow.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain2.com'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 接收domain2返回数据</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt;&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(event.data));  <span class="comment">// &#123; name: "yuyi", age: 27 &#125;</span></span></span><br><span class="line"><span class="javascript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>b.html (<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, (event) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 确保发送消息的域是已知的域</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (event.origin === <span class="string">'http://www.domain2.com'</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(event.data));  <span class="comment">// &#123; name: "yuyi" &#125;</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(event.data);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (data) &#123;</span></span><br><span class="line"><span class="undefined">      data.age = 27;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.parent.postMessage(<span class="built_in">JSON</span>.stringify(data), <span class="string">'http://www.domain1.com'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在通过内嵌框架加载其他域的内容时，使用XDM是非常方便的。使用XDM，包含&lt;iframe&gt;的页面跨域确保自身不受恶意内容侵扰。但是XDM也有一个需要注意的地方。最初，postMessage()的第一个参数是“字符串”，后来改为允许传入任何数据结构。但是并非所有浏览器都实现了这个变化，所以为了保险起见，第一个参数最好都传字符串。</p><h4 id="六、跨域资源共享CORS"><a href="#六、跨域资源共享CORS" class="headerlink" title="六、跨域资源共享CORS"></a><span id="method-6">六、跨域资源共享CORS</span></h4><p>CORS(Cross-Origin Resource Sharing)定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 GET 以外的 HTTP 请求，或者搭配某些 MIME 类型的 POST 请求），浏览器必须首先使用 OPTIONS 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证相关数据）。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">详情</a></p><p>普通的跨域请求只需要服务端设置 <strong>Access-Control-Allow-Origin</strong>即可，前端无需设置，若要带<strong>cookie</strong>请求，则前后端都要设置。</p><p>目前所有的浏览器都支持该功能（IE8+：IE8/9使用XDomainRequest对象来支持CORS），CORS已经成为主流的跨域解决方案。</p><p>前端设置(<a href="http://www.domain1.com)：" target="_blank" rel="noopener">http://www.domain1.com)：</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'http://www.domain2.com:8888/login'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="string">'user=admin'</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Nodejs后台(<a href="http://www.domain2.com)：" target="_blank" rel="noopener">http://www.domain2.com)：</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>, <span class="comment">// 后端允许发送cookie</span></span><br><span class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://www.domain1.com'</span>, <span class="comment">// 允许访问的域（协议+域名+端口）</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.write(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">name</span>: <span class="string">"yuyi"</span>&#125;));</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="七、Web-Sockets协议跨域"><a href="#七、Web-Sockets协议跨域" class="headerlink" title="七、Web Sockets协议跨域"></a><span id="method-7">七、Web Sockets协议跨域</span></h4><p>Web Sockets protocol是HTML5一种新的协议。它的目标是在一个单独的持久连接上提供全双工、双向通信，同时允许跨域通讯。在JavaScript中创建了Web Socket之后，会有一个HTTP请求发送到浏览器以发起连接。在取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为Web Socket协议。也就是说，使用标准的HTTP服务器无法实现Web Sockets，只有支持这种协议的专门服务器才能正常工作。<br>原生的Web Sockets API使用起来不太方便，我们使用Socket.io，它很好地封装了WebSocket接口，提供了更简单、灵活的接口，也对不支持WebSocket的浏览器提供了向下兼容。</p><p>前端代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'input'</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'./socket.io.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> socket = io(<span class="string">'http://www.domain2.com:8888'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 连接成功处理</span></span></span><br><span class="line"><span class="javascript">  socket.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听服务端消息</span></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'data from server: '</span> + msg);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 监听服务端关闭</span></span></span><br><span class="line"><span class="javascript">    socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">'Server socket has closed.'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    socket.send(<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>Nodejs socket后台：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> socket = <span class="built_in">require</span>(<span class="string">'socket.io'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动http服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.listen(server).on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 接收信息</span></span><br><span class="line">  client.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    client.send(<span class="string">'hello: '</span> + msg);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'data from client: '</span> + msg);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 断开连接</span></span><br><span class="line">  client.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Client socket has closed.'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>(完)</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>盒子模型和box-sizing</title>
      <link href="/2018/04/25/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8Cbox-sizing/"/>
      <url>/2018/04/25/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%92%8Cbox-sizing/</url>
      <content type="html"><![CDATA[<p>关于盒子模型，几乎是每个学习前端的同学都必须要了解和掌握的知识，同时也是面试过程中经常会被问到的，今天我们就来详细的学习一下盒子模型，同时学习一下改变计算元素宽度和高度的CSS3属性：box-sizing。</p><a id="more"></a><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>在一个文档中，每个<strong>元素</strong>都被表示为一个<strong>矩形的盒子</strong>。确定这些盒子的尺寸，属性（颜色，背景，边框）和位置是渲染引擎的目标。</p><p>在CSS中，使用标准盒模型描述这些矩形盒子中的每一个。这个模型描述了元素所占空间的内容。</p><p>每个盒子有四个边：</p><ol><li>外边距 margin</li><li>边框 border</li><li>内边距 padding</li><li>内容 content</li></ol><p>如下图所示（图片来自MDN）：<br><img src="/2018/04/25/盒子模型和box-sizing/boxmodel.png" title="box-model"></p><p><strong>内容区域 content area</strong> 是包含元素真实内容的区域。它通常包含背景、颜色或者图片等，位于内容边界的内部，它的大小为内容宽度及内容高度。如果box-sizing为默认值，width，min-width，max-width，height，min-height，max-height 控制内容的大小。</p><p><strong>内边距区域 padding area</strong> 延伸到包围padding的边框。如果内容区域设置了背景、颜色或者图片，这些样式将会延伸到padding上，而不是仅仅作用于内容区域。内边距与内容边界之间的空间由 padding 控制。</p><p><strong>边框区域 border area</strong> 是包含边框的区域，扩展了内边距区域。它位于边框边界内部，由 border 控制。</p><p><strong>外边距区域 margin area</strong> 用空白区域扩展边框区域，以分开相邻的元素。它的大小由 margin 控制。</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">外边距合并</a> 的情况下，由于盒之间共享外边距，外边距不容易弄清楚。</p><p>最后，对于非替换的行内元素来说，尽管内容周围存在内边距与边框，但其占用空间（行高）由 <strong>line-height</strong> 属性决定。如下图所示：<br><img src="/2018/04/25/盒子模型和box-sizing/inline-line-height-1.png"><br><img src="/2018/04/25/盒子模型和box-sizing/inline-line-height-2.png"></p><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p><strong>box-sizing</strong> 属性可以用来更改用于计算元素宽度和高度的默认的<strong>CSS盒子模型</strong>，即：由标准盒子模型，改为IE的怪异盒子模型。可以使用此属性来模拟不正确支持CSS盒子模型规范的浏览器的行为。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 关键字 值 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局 值 */</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></p><p>在CSS中，你设置一个元素的宽度与高度只会应用到这个元素的内容区。如果这个元素又任何的 border 或 padding，绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距的值。这意味着当你调整一个元素的宽高时，要时刻注意到这个元素的边框和内边距。特别是当我们事先响应式布局时，这个特点非常的烦人，不便于计算。</p><p>box-sizing属性可以被用来调整这些表现：</p><ul><li><p><strong>content-box</strong> 默认值，标准盒子模型。width和height只包括内容的宽和高，不包括边框border，内边距padding，外边距margin。计算公式：<br>width = 内容的宽度，<br>height = 内容的高度。<br>如下图所示：</p><img src="/2018/04/25/盒子模型和box-sizing/content-box.png"></li><li><p><strong>border-box</strong> width和height属性包括内容，内边距和边框，但不包括外边距。内容框不能为负，并且被分配到0。计算公式：<br>width = border + padding + 内容的width，<br>height = border + padding + 内容的height。<br>如下图所示：</p><img src="/2018/04/25/盒子模型和box-sizing/border-box.png"></li></ul><p>在其他文章中有了解到，from表单中的一些元素，在默认状态下，表现的不一致，我们这里不去深究，在之后的文章中再单独研究。</p><p>以上就是关于盒子模型和box-sizing属性的介绍，如果有错误的地方，欢迎指正。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>深入理解JavaScript事件流</title>
      <link href="/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
      <url>/2018/04/21/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%BA%8B%E4%BB%B6%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>“JavaScript与HTML之间的交互是通过<strong>事件</strong>实现的。事件，就是文档或浏览器窗口中发生的一些特定的交互瞬间。可以使用<strong>侦听器</strong>（或处理程序）来预订事件，以便事件发生时执行相应的代码。这种在传统软件工程中被称为观察员模式的模型，支持页面的行为（JavaScript代码）与页面的外观（HTML和CSS代码）之间的松散耦合。”</p><a id="more"></a><p><strong>事件流</strong>描述的是从页面中接收事件的顺序。  </p><p>本文主要讲解以下几个内容：</p><ol><li>事件冒泡  </li><li>事件捕获  </li><li>DOM事件流  </li><li>事件执行的顺序</li></ol><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>IE的事件流叫做<strong>事件冒泡</strong>（event bubbling），即事件开始时由最具体的元素（文档中嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）。以下面的HTML页面为例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'div'</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果你单击了页面中的&lt;div&gt;元素，那么这个click事件会按照如下顺序传播：  </p><ol><li>&lt;div&gt;</li><li>&lt;body&gt;</li><li>&lt;html&gt;</li><li>document</li></ol><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>Netscape Communicator团队提出的另一种事件流叫做<strong>事件捕获</strong>（event capturing）。事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。事件捕获的用意在于：在事件到达预定目标之前捕获它。仍已前面的HTML页面为例，单击&lt;div&gt;元素会以下列顺序触发click事件：</p><ol><li>document</li><li>&lt;html&gt;</li><li>&lt;body&gt;</li><li>&lt;div&gt;</li></ol><h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：</p><ol><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ol><p>首先发生的是事件捕获，为截获事件提供了机会。然后是实际的目标接收到事件。最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应。</p><p>这里主要学习下<strong>DOM2级事件处理程序</strong><br>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：<br>addEventListener()和removeEventListener()<br>所有的DOM节点都包含了这两个方法。</p><p>addEventListener()语法如下：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target.addEventListener(type, listener, options);</span><br><span class="line">target.addEventListener(type, listener, &#123;<span class="attr">capture</span>: <span class="built_in">Boolean</span>, <span class="attr">bubbling</span>: <span class="built_in">Boolean</span>, <span class="attr">once</span>: <span class="built_in">Boolean</span>&#125;);</span><br><span class="line">target.addEventListener(type, listener, useCapture);</span><br><span class="line">target.addEventListener(type, listener[, useCapture, wantsUntrusted]);  <span class="comment">// Gecko/Mozilla only</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><strong>type</strong>：表示监听<strong>事件类型</strong>的字符串 </li><li><strong>listener</strong>：作为事件处理程序的函数</li><li><strong>options</strong>: 可选，一个指定有关 listener 属性的可选的参数对象，可用的选项包括：<br>capture:Boolean, once:Boolean, passive:Boolean, mozSystemGroup:Boolean   </li><li><strong>useCapture</strong>: 可选，Boolean, 指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件 </li><li><strong>wantsUntrusted</strong>: 如果为 true , 则事件处理程序会接收网页自定义的事件。此参数只适用于 Gecko，主要用于附加组件的代码和浏览器本身</li></ul><p><strong>注意</strong>：在旧版本的DOM的规定中， addEventListener()的第三个参数是一个布尔值表示是否在捕获阶段调用事件处理程序。详情请<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="noopener">点击查看MDN</a>  </p><p>removeEventListener()语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target.removeEventListener(type, listener[, useCapture]);</span><br></pre></td></tr></table></figure></p><p>参数说明：  </p><ul><li><strong>type</strong>：一个字符串，表示需要移除的事件类型，如“click”</li><li><strong>listener</strong>：需要移除的 EventListener 函数（先前使用addEventListener方法定义的）</li><li><strong>useCapture</strong>：可选，指定需要移除的 EventListener 函数是否为事件捕获。默认值为 false<br>如果同一个监听事件分别为“事件捕获”和“事件冒泡”注册了一次，一共两次，那么这两次事件需要分别移除  </li></ul><h3 id="事件执行的顺序"><a href="#事件执行的顺序" class="headerlink" title="事件执行的顺序"></a>事件执行的顺序</h3><p>我们先看一个题目：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'outer'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'inner'</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="built_in">document</span>.getElementById(<span class="string">'outer'</span>);</span><br><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ccc'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>当我们点击按钮时，打印的结果是什么？大家可以尝试一下。<br>答案是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ddd</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>我们来分析下：  </p><ol><li>首先是事件捕获阶段，<strong>div#outer</strong>元素首先接收到click事件，所以第一个打印的是“ddd”；</li><li>然后是处于目标阶段，在处于目标阶段时，事件触发的顺序跟addEventListener方法的第三个参数无关，而是谁先绑定，谁先执行，所以第二个打印的是“bbb”，然后是“ccc”，大家可以调换一下绑定顺序看看；</li><li>最后是事件冒泡阶段，<strong>div#outer</strong>接收到click事件，打印出“aaa”。</li></ol><p>大多数情况下，都是将事件处理程序添加到事件流的冒泡阶段，这样可以最大限度地兼容各种浏览器。最好只在需要在事件到达目标之前截获它的时候将事件处理程序添加到捕获阶段。如果不是特别需要，不建议在事件捕获阶段注册事件处理程序。  </p><p>另外，在绑定事件的时候，如果绑定的是匿名函数，比如下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">bbb</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：如果是使用IE的attachEvent()方法来绑定事件，这时的执行顺序正好相反。</p><p>如果是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>如果是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, handler, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>这时候点击按钮打印结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa </span><br><span class="line">aaa</span><br></pre></td></tr></table></figure></p><p>当我们需要取消事件的进一步捕获或冒泡时，就要用到stopPropagation()方法，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> outer = <span class="built_in">document</span>.getElementById(<span class="string">'outer'</span>);</span><br><span class="line"><span class="keyword">const</span> inner = <span class="built_in">document</span>.getElementById(<span class="string">'inner'</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  ev.stopPropagation();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bbb'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">inner.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ccc'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">outer.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ddd'</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>当我们点击按钮时，打印的结果是什么？。<br>答案是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ddd</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure></p><p>这里需要注意一下，调用stopPropagation方法时，是处于目标阶段，不影响此阶段的事件执行，所以会打印出“ccc”。</p><h3 id="事件流的应用：事件代理"><a href="#事件流的应用：事件代理" class="headerlink" title="事件流的应用：事件代理"></a>事件流的应用：事件代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">'wrap'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>橘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果点击页面中的li元素，要求输出li当中的内容，我们通常会这样来写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>);</span><br><span class="line">  <span class="keyword">const</span> list = wrap.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    list[i].addEventListener(<span class="string">'click'</span>, showContent, <span class="literal">false</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    alert(ev.target.innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>利用事件流的特性，我们可以只在父元素ul上绑定一个事件就可以完成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">'wrap'</span>);</span><br><span class="line">  </span><br><span class="line">  wrap.addEventListener(<span class="string">'click'</span>, showContent, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showContent</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.target.nodeName.toLowerCase() === <span class="string">'li'</span>) &#123;</span><br><span class="line">      alert(ev.target.innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段；<br>2、addEventListener方法的使用；<br>3、处于目标阶段时，事件执行的顺序与绑定的顺序相同；<br>4、取消事件的进一步捕获或冒泡使用 stopPropagation() 方法。</p><p>以上就是关于JavaScript事件流的介绍，如果有错误的地方，欢迎指正。</p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
